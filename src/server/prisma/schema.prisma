generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email                       String        @unique
  password                    String?
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  avatar                      String?
  name                        String
  resetPasswordToken          String?
  resetPasswordTokenExpiresAt DateTime?
  role                        ROLE          @default(USER)
  googleId                    String?
  facebookId                  String?
  twitterId                   String?
  id                          String        @id @default(uuid())
  addresses                   Address[]
  carts                       Cart[]
  cartEvents                  CartEvent[]
  chats                       Chat[]        @relation("UserChats")
  messages                    ChatMessage[]
  interactions                Interaction[]
  orders                      Order[]
  payments                    Payment[]
  reports                     Report[]
  Restock                     Restock[]
  reviews                     Review[]
  wishlists                   Wishlist[]

  @@index([email])
}

model Product {
  name          String           @unique
  description   String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  salesCount    Int              @default(0)
  averageRating Float            @default(0)
  slug          String           @unique
  reviewCount   Int              @default(0)
  id            String           @id @default(uuid())
  categoryId    String?
  isBestSeller  Boolean          @default(false)
  isFeatured    Boolean          @default(false)
  isNew         Boolean          @default(false)
  isTrending    Boolean          @default(false)
  interactions  Interaction[]
  category      Category?        @relation(fields: [categoryId], references: [id])
  variants      ProductVariant[]
  reviews       Review[]
  wishlists     Wishlist[]

  @@index([name, slug])
}

model ProductVariant {
  id                String                    @id @default(uuid())
  productId         String
  sku               String                    @unique
  price             Float
  stock             Int
  lowStockThreshold Int                       @default(10)
  barcode           String?
  warehouseLocation String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  images            String[]                  @default([])
  cartItems         CartItem[]
  orderItems        OrderItem[]
  product           Product                   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributes        ProductVariantAttribute[]
  restocks          Restock[]
  stockMovements    StockMovement[]

  @@index([productId, sku])
}

model Attribute {
  id                String                    @id @default(uuid())
  name              String                    @unique
  slug              String                    @unique
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  values            AttributeValue[]
  categories        CategoryAttribute[]
  variantAttributes ProductVariantAttribute[]

  @@index([name, slug])
}

model AttributeValue {
  id                String                    @id @default(uuid())
  attributeId       String
  value             String
  slug              String                    @unique
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  attribute         Attribute                 @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  variantAttributes ProductVariantAttribute[]

  @@index([attributeId, value])
}

model ProductVariantAttribute {
  id          String         @id @default(uuid())
  variantId   String
  attributeId String
  valueId     String
  createdAt   DateTime       @default(now())
  attribute   Attribute      @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  value       AttributeValue @relation(fields: [valueId], references: [id], onDelete: Cascade)
  variant     ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([variantId, attributeId, valueId])
  @@index([variantId, attributeId])
}

model Category {
  name        String
  slug        String              @unique
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  description String?
  id          String              @id @default(uuid())
  images      String[]
  icon        String?
  parentId    String?
  parent      Category?           @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]          @relation("CategoryHierarchy")
  attributes  CategoryAttribute[]
  products    Product[]

  @@index([name, slug])
  @@index([parentId])
}

model CategoryAttribute {
  id          String    @id @default(uuid())
  categoryId  String
  attributeId String
  isRequired  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, attributeId])
  @@index([categoryId, attributeId])
}

model StockMovement {
  id        String         @id @default(uuid())
  quantity  Int
  reason    String
  userId    String?
  createdAt DateTime       @default(now())
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([variantId])
}

model Restock {
  id        String         @id @default(uuid())
  quantity  Int
  notes     String?
  userId    String?
  createdAt DateTime       @default(now())
  variantId String
  user      User?          @relation(fields: [userId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([variantId])
}

model Review {
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(uuid())
  userId    String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId, userId])
}

model Order {
  amount      Float
  createdAt   DateTime     @default(now())
  orderDate   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  id          String       @id @default(uuid())
  status      String       @default("PENDING")
  address     Address?     @relation("OrderAddress")
  user        User         @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  payment     Payment?     @relation("OrderPayment")
  shipment    Shipment?    @relation("OrderShipment")
  transaction Transaction? @relation("OrderTransaction")

  @@index([userId])
}

model OrderItem {
  quantity  Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  price     Float
  id        String         @id @default(uuid())
  orderId   String
  variantId String
  order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant   ProductVariant @relation(fields: [variantId], references: [id])

  @@index([orderId, variantId])
}

model Payment {
  method    String
  amount    Float
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  status    PAYMENT_STATUS @default(PENDING)
  id        String         @id @default(uuid())
  userId    String
  orderId   String?        @unique
  order     Order?         @relation("OrderPayment", fields: [orderId], references: [id])
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, orderId])
}

model Address {
  city      String
  state     String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  street    String
  zip       String
  id        String   @id @default(uuid())
  userId    String
  orderId   String?  @unique
  order     Order?   @relation("OrderAddress", fields: [orderId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, orderId])
}

model Shipment {
  carrier        String
  trackingNumber String
  shippedDate    DateTime
  deliveryDate   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  id             String    @id @default(uuid())
  orderId        String    @unique
  order          Order     @relation("OrderShipment", fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Transaction {
  transactionDate DateTime           @default(now())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  status          TRANSACTION_STATUS @default(PENDING)
  id              String             @id @default(uuid())
  orderId         String             @unique
  order           Order              @relation("OrderTransaction", fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Cart {
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  sessionId  String?     @unique
  status     CART_STATUS @default(ACTIVE)
  userId     String?
  id         String      @id @default(uuid())
  user       User?       @relation(fields: [userId], references: [id])
  cartEvents CartEvent[]
  cartItems  CartItem[]

  @@index([userId, sessionId])
}

model CartItem {
  quantity  Int            @default(1)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  id        String         @id @default(uuid())
  cartId    String
  variantId String
  cart      Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([cartId, variantId])
  @@index([cartId, variantId])
}

model CartEvent {
  id        String     @id @default(uuid())
  userId    String?
  cartId    String
  eventType CART_EVENT @default(PENDING)
  timestamp DateTime   @default(now())
  sessionId String?
  createdAt DateTime   @default(now())
  cart      Cart       @relation(fields: [cartId], references: [id], onDelete: Cascade)
  user      User?      @relation(fields: [userId], references: [id])
}

model Interaction {
  type      String
  createdAt DateTime @default(now())
  id        String   @id @default(uuid())
  userId    String?
  productId String?
  sessionId String?
  product   Product? @relation(fields: [productId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId, sessionId, productId])
}

model Report {
  type       String
  format     String
  createdAt  DateTime @default(now())
  parameters Json
  filePath   String?
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Log {
  level     String
  message   String
  context   Json?
  createdAt DateTime @default(now())
  id        String   @id @default(uuid())
}

model Section {
  id             Int          @id @unique @default(autoincrement())
  title          String?
  description    String?
  icons          String?
  link           String?
  ctaText        String?
  isVisible      Boolean?     @default(false)
  primaryColor   String?
  secondaryColor String?
  type           SECTION_TYPE @default(HERO)
  images         String[]     @default([])
}

model Chat {
  id        String        @id @default(uuid())
  status    CHAT_STATUS   @default(OPEN)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String
  user      User          @relation("UserChats", fields: [userId], references: [id], onDelete: Cascade)
  messages  ChatMessage[]

  @@index([userId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String?
  createdAt DateTime @default(now())
  type      String   @default("TEXT")
  url       String?
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatId, senderId])
}

enum ROLE {
  ADMIN
  USER
  SUPERADMIN
}

enum TRANSACTION_STATUS {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  CANCELED
  RETURNED
  REFUNDED
}

enum PAYMENT_STATUS {
  PENDING
  PAID
  CANCELED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum CART_STATUS {
  ACTIVE
  ABANDONED
  CONVERTED
}

enum CHAT_STATUS {
  OPEN
  RESOLVED
}

enum CART_EVENT {
  PENDING
  ADD
  CHECKOUT_STARTED
  CHECKOUT_COMPLETED
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

enum SECTION_TYPE {
  HERO
  PROMOTIONAL
  BENEFITS
  NEW_ARRIVALS
}
